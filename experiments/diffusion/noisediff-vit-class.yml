experiment_name: diffusion/noisediff-vit5_class_${matrix_slug}

matrix:
  ds: ["cifar10"]
  nexp: [1.]
  nmin: [.8]
  opt: ["AdamW"]
  lr: [0.004]
  patch:
    - 4
  l:
    - 6
  dim:
    - 64
  mlpdim:
    - 256
  head:
    - 4

trainer: experiments.diffusion.trainer.TrainDiffusion
diffusion_sampler: |
  from experiments.diffusion.sampler import DiffusionSamplerNoise, DiffusionSamplerNoiseMix, DiffusionSamplerNoiseBlur 
  DiffusionSamplerNoiseMix()
noise_amount_exponent: ${nexp}
minimum_noise: ${nmin}
generator_shape: |
  SHAPE
num_class_logits: |
  CLASSES

globals:
  SHAPE: (3, 32, 32)
  CLASSES: 10

train_set: |
  ClassLogitsDataset(
    ${ds}_dataset(train=True, shape=SHAPE, interpolation=False) 
      .transform([lambda x: (x * 255).to(torch.uint8), VT.TrivialAugmentWide(), lambda x: x.to(torch.float32) / 255.]),
    num_classes=CLASSES, tuple_position=1, label_to_index=True,
  )

validation_set: |
  ClassLogitsDataset(
    ${ds}_dataset(train=False, shape=SHAPE, interpolation=False),
    num_classes=CLASSES, tuple_position=1, label_to_index=True,
  )

batch_size: 64

learnrate: ${lr}
optimizer: ${opt}
scheduler: CosineAnnealingWarmupLR
loss_function: l1
max_inputs: 1_200_000
num_epochs_between_validations: 1
#num_inputs_between_validations: 120_000

model: |
  from experiments.diffusion.vit import ViT
  from experiments.diffusion.trainer import DiffusionModelOutput
  
  class Module(nn.Module):
      def __init__(self):
          super().__init__()
          self.module = ViT(
              image_channels=SHAPE[0] + CLASSES + 1,
              output_channels=SHAPE[0],
              image_size=SHAPE[1],
              patch_size=${patch},
              num_layers=${l},
              num_heads=${head},
              hidden_dim=${dim},
              mlp_dim=${mlpdim},
          )
  
      def forward(self, input):
          x = torch.cat([input.images, input.parameter_embedding()], dim=-3)
          return DiffusionModelOutput(noise=self.module(x)) 
  
  Module()
