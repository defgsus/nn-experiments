experiment_name: img2img/shinytubes-spikes7b-gatedilationmix-wave-${matrix_slug}

matrix:
  init:
    - .01
  bs: [64]
  opt: ["AdamW"]
  lr: [.0005]
  rnd: [True]
  l:
    - 11
  ks:
    - 5 #[ 3,  3,  5,  7,  9]
  pad:
    - 2 #[1,   1,  2,  3,  4]
  ch:
    #- 32 #[32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32]
    - 32
  stride:
    - 1
  gate:
    - [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0]
  wavelet:
    - True
  act:
    - gelu

trainer: experiments.img2img.trainer.TrainImg2Img
# histogram_loss_weight: 100.
# image_loss_margin: 2
resize_log_images: 3.

train_set: |
  ImageSourceTargetCropDataset("datasets/shiny-tubes3/train", SHAPE[-2:], target_first=True, num_crops=5000, random=${rnd})

validation_set: |
  ImageSourceTargetCropDataset("datasets/shiny-tubes3/validation", SHAPE[-2:], target_first=True, num_crops=2000, random=False)

batch_size: ${bs}
learnrate: ${lr}
optimizer: ${opt}
scheduler: CosineAnnealingWarmupLR
loss_function: l1
max_inputs: 1_000_000
num_inputs_between_validations: 100_000
# freeze_validation_set: True


globals:
  SHAPE: (3, 32, 32)

model: |
  from experiments.denoise.resconv import ResConv
  
  class Module(nn.Module):
      def __init__(self):
          super().__init__()
          self.module = ResConv(
              in_channels=SHAPE[0],
              num_layers=${l},
              channels=${ch},
              stride=${stride},
              kernel_size=${ks},
              padding=${pad},
              activation="${act}",
              activation_last_layer=None,
              init_weights=${init},
              gating=${gate},
              wavelet=${wavelet},
          )
  
      def forward(self, x):
          return self.module(x) 
  
  Module()
