experiment_name: img2img/shinytubes-spikes-diff2-${matrix_slug}

matrix:
  init:
    - .01
  bs: [64]
  opt: ["AdamW"]
  lr: [.001]
  rnd: [True]
  l:
    - 11
  ks:
    - 3 #[ 3,  3,  5,  7,  9]
  pad:
    - 1 #[1,   1,  2,  3,  4]
  ch:
    - 32 #[32, 32, 48, 64, 80]
  stride:
    - 1 #[ 1,  1,  1,  1,  1]
  act:
    - gelu

trainer: experiments.img2img.shinytubes.diffusion.trainer.TrainImg2ImgDiffusion
# histogram_loss_weight: 100.
resize_log_images: 3.

train_set: |
  from experiments.img2img.shinytubes.diffusion.diffusiondataset import DiffusionDataset
  DiffusionDataset(
    ImageSourceTargetCropDataset("${PATH}/datasets/shiny-tubes3/train", SHAPE[-2:], num_crops=5000, random=${rnd}),
    seed=None,
  )

validation_set: |
  DiffusionDataset(
    ImageSourceTargetCropDataset("${PATH}/datasets/shiny-tubes3/validation", SHAPE[-2:], num_crops=2000, random=False),
    seed=23,
  )

batch_size: ${bs}
learnrate: ${lr}
optimizer: ${opt}
scheduler: CosineAnnealingWarmupLR
loss_function: l1
max_inputs: 1_000_000
num_inputs_between_validations: 100_000
# freeze_validation_set: True


globals:
  SHAPE: (3, 32, 32)

model: |
  from experiments.denoise.resconv import ResConv
  
  class Module(nn.Module):
      def __init__(self):
          super().__init__()
          self.module = ResConv(
              in_channels=SHAPE[0] + 1,
              out_channels=SHAPE[0],
              num_layers=${l},
              channels=${ch},
              stride=${stride},
              kernel_size=${ks},
              padding=${pad},
              activation="${act}",
              activation_last_layer=None,
              init_weights=${init},
          )
  
      def forward(self, x, amount):
          x = torch.cat([
              x,
              amount[:, None, None, None].repeat(1, 1, *x.shape[-2:])
          ], dim=-3)
          return self.module(x) 
  
  Module()
