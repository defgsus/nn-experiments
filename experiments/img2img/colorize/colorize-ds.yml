experiment_name: img2img/colorize-ds:color_${matrix_slug}

matrix:
  init:
    - 0.001
  color: [.05]
  std: [0.15]
  bs: [64]
  opt: ["AdamW"]
  lr: [.003]
  l:
    - 5
  ks:
    - [ 3,  3,  5,  7,  9]
  pad:
    - 1 #[1,   1,  2,  3,  4]
  ch:
    - [32, 32, 48, 64, 80]
  stride:
    - 1 #[ 1,  1,  1,  1,  1]
  act:
    - gelu

trainer: experiments.img2img.trainer.TrainImg2Img
first_arg_is_transforms: |
  [
    VT.Grayscale(),  
    # RandomCropHalfImage(),
  ]
# histogram_loss_weight: 100.

train_set: |
  base_dataset = WrapDataset(TensorDataset(torch.load("datasets/colorful-uint-64x64-340k.pt")))
  (
    base_dataset.skip(5000)
    .transform([
        lambda x: x.to(torch.float) / 255.,
        VT.RandomRotation(10),
        VT.RandomCrop(SHAPE[-2:]), 
    ])
  )

validation_set: |
  (
    base_dataset.limit(5000)
    .center_crop(SHAPE[-2:])
    .transform([lambda x: x.to(torch.float) / 255.])
  )

batch_size: ${bs}
learnrate: ${lr}
optimizer: ${opt}
scheduler: CosineAnnealingWarmupLR
loss_function: l1
max_inputs: 10_000_000
num_inputs_between_validations: 100_000

globals:
  SHAPE: (3, 52, 52)

model: |
  from experiments.denoise.resconv import ResConv
  
  class Module(nn.Module):
      def __init__(self):
          super().__init__()
          self.module = ResConv(
              in_channels=1,
              out_channels=SHAPE[0],
              num_layers=${l},
              channels=${ch},
              stride=${stride},
              kernel_size=${ks},
              padding=${pad},
              activation="${act}",
              activation_last_layer=None,
              init_weights=${init},
          )
  
      def forward(self, x):
          return x.repeat(1, 3, 1, 1) + self.module(x) 
  
  Module()
