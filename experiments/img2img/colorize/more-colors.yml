$extends: baseline.yml

experiment_name: img2img/colorize-more-${matrix_slug}

matrix:
  init:
    - 0.001
  ds:
    - "cifar10"
    #- "all"
  color: [.05]
  bs: [64]
  opt: ["AdamW"]
  lr: [.003]
  l:
    - 5
  ks:
    - [ 3,  3,  5,  7,  9]
  pad:
    - 1 #[1,   1,  2,  3,  4]
  ch:
    - [32, 32, 48, 64, 80]
  stride:
    - 1 #[ 1,  1,  1,  1,  1]
  act:
    - gelu

trainer: experiments.img2img.trainer.TrainImg2Img
first_arg_is_transforms: |
  [
    VT.Grayscale(),  
  ]
# histogram_loss_weight: 100.

train_set: |
  if "${ds}" == "all":
      ds = all_image_patch_dataset(shape=SHAPE).skip(5000)
  else:
      ds = ${ds}_dataset(train=True, shape=SHAPE, interpolation=False)
  
  def is_colorful(args):
     pic = args[0]
     c = pic.flatten(1).mean(dim=1, keepdim=True)
     return c.std().item() > ${color}

  ds.filter(is_colorful)

validation_set: |
  if "${ds}" == "all":
      ds = all_image_patch_dataset(shape=SHAPE).limit(5000)
  else:
      ds = ${ds}_dataset(train=False, shape=SHAPE, interpolation=False)
  ds

batch_size: ${bs}
learnrate: ${lr}
optimizer: ${opt}
scheduler: CosineAnnealingWarmupLR
loss_function: l1
max_inputs: 1_000_000
num_inputs_between_validations: 100_000
freeze_validation_set: True


globals:
  SHAPE: (3, 32, 32)

model: |
  from experiments.denoise.resconv import ResConv
  
  class Module(nn.Module):
      def __init__(self):
          super().__init__()
          self.module = ResConv(
              in_channels=1,
              out_channels=SHAPE[0],
              num_layers=${l},
              channels=${ch},
              stride=${stride},
              kernel_size=${ks},
              padding=${pad},
              activation="${act}",
              activation_last_layer=None,
              init_weights=${init},
          )
  
      def forward(self, x):
          return x.repeat(1, 3, 1, 1) + self.module(x) 
  
  Module()
