experiment_name: classify/bias-only_${matrix_slug}

matrix:
  trial: [2]
  bs:
    - 64
  lr:
    - 0.0003
  opt:
    - AdamW
  ds:
    - "mnist"
    #- "stl10"
  shape:
    - [1, 28, 28]
#    - [3, 96, 96]
  cls:
    - 10
  aug:
    - "'wide'"
  #    - "'cutoutp'"
  elastic:
    - None
  #    - [100., 10.]
  config:
    #- {ch: [32, 32, 32], ks: [9, 3, 5], st: [3, 1, 1], di: [1, 1, 1]}
    #- {ch: [64, 128, 256], ks: [9, 3, 5], st: [3, 1, 1], di: [1, 1, 1]}
    - {ch: [64, 128, 256], ks: [9, 3, 3], st: [3, 1, 1], di: [1, 1, 1]}
  lwc:
    - True
    #- False
  lwl:
    - True
    #- False

trainer: experiments.classify.classifier_trainer.ClassifierTrainer
num_classes: ${cls}

train_set: |
  ds = ${ds}_dataset(shape=${shape}, train=True)
  if ${aug} == "wide":
      ds = TransformIterableDataset(ds, transforms=[
          lambda x: (x * 255.).to(torch.uint8),
          VT.TrivialAugmentWide(),
          lambda x: x.float() / 255.,
      ])
  elif ${aug} == "cutoutp":
      ds = TransformIterableDataset(ds, transforms=[
          VT.Compose((
              VT.Pad(12),
              VT.RandomCrop((96, 96)),
              VT.RandomHorizontalFlip(),
              VT.RandomErasing(),
          ))
      ])
  if ${elastic}:
      ds = TransformIterableDataset(
          ds,
          transforms=[VT.ElasticTransform(alpha=${elastic}[0], sigma=${elastic}[1])],
      )
  ds

validation_set: |
  ${ds}_dataset(shape=${shape}, train=False)

batch_size: ${bs}
learnrate: ${lr}
optimizer: ${opt}
scheduler: CosineAnnealingWarmupLR
max_inputs: 1_200_000
#num_inputs_between_validations: 1000000
#num_workers: 4

model: |
  from experiments.classify.models.ksd_conv import KSDConvClassificationModel
  
  model = ConvClassificationModel(
      shape=${shape},
      channels=${config}["ch"],
      kernel_size=${config}["ks"],
      stride=${config}["st"],
      dilation=${config}["di"],
      activation=["relu"] * len(${config}["ch"]),
      learn_weights_conv=${lwc},
      learn_weights_linear=${lwl},
      num_classes=${cls},
  )
  # print(model)
  model
