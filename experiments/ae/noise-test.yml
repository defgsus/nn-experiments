matrix:
  #noise: [0.0, 0.01, 0.05, 0.1, 0.2]
  scale: [.5, 0.05, 0.1, 0.3]

experiment_name: ae/perspec1_${matrix_slug}

trainer: experiments.ae.trainer.TrainAutoencoderSpecial

train_set: |
  rpg_tile_dataset_3x32x32(SHAPE, validation=False)

validation_set: |
  rpg_tile_dataset_3x32x32(SHAPE, validation=True)

batch_size: 64
learnrate: 0.0005
optimizer: Adam
scheduler: CosineAnnealingLR
loss_function: l1
max_inputs: 2_000_000
train_input_transforms: |
  [
      #lambda x: x + torch.randn_like(x) * {noise}
      #VT.RandomErasing(p=1., scale=(${scale}, ${scale}))
      VT.RandomPerspective(p=1., distortion_scale=${scale})
  ]

globals:
  SHAPE: (1, 32, 32)
  CODE_SIZE: 128

model: |
  encoder = EncoderConv2d(SHAPE, code_size=CODE_SIZE, channels=(24, 32, 48), kernel_size=5)

  encoded_shape = encoder.convolution.get_output_shape(SHAPE)
  decoder = nn.Sequential(
      nn.Linear(CODE_SIZE, math.prod(encoded_shape)),
      Reshape(encoded_shape),
      encoder.convolution.create_transposed(act_last_layer=False),
  )

  EncoderDecoder(encoder, decoder)
