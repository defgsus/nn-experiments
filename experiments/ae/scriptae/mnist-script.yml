experiment_name: ae/mnist_${matrix_slug}

matrix:
  script:
  - "ch=32|down7|ch/8|ch/2|ch/2|ch/2|ch/2|ch=1"  # baseline 1:49, 6M params, v-l2=0.0074
  #- "ch=8|down7|ch/4|ch/2|ch/2|ch/2|ch/2|ch=1"   # 800K params, v-l2=0.017
  #- "down7|ch/2|ch/2|ch/2|ch/2|ch/2|ch=1"  # BAD

  ks:
    - 3
  act:
    - "relu6"
  eact:
    - "None"
  dact:
    - "relu6"
    #- "sigmoid"
  bn:
    - False
  percept_ch:
    - 0
    #- 128

trainer: experiments.ae.trainer.TrainAutoencoderSpecial
feature_loss_weight: 0.

perceptual_model: |
  if ${percept_ch} == 0:
      model = None
  else:
      model = nn.Sequential(
          nn.Conv2d(SHAPE[0], ${percept_ch}, kernel_size=3, padding=1),
      )
  model

train_set: |
  mnist_dataset(shape=SHAPE, train=True)

validation_set: |
  mnist_dataset(shape=SHAPE, train=False)

batch_size: 64
learnrate: 0.0003
optimizer: AdamW
scheduler: CosineAnnealingWarmupLR
loss_function: l2
max_inputs: 1_000_000

globals:
  SHAPE: (1, 28, 28)

model: |
  from experiments.ae.scriptae.scriptae2 import ScriptedAE
  
  model = ScriptedAE(
      channels=SHAPE[0],
      kernel_size=${ks},
      padding=None,
      activation="${act}",
      final_encoder_activation="${eact}",
      final_decoder_activation="${dact}",
      batch_norm=${bn},
      script="${script}",
  )
  
  with torch.no_grad():
      print(model)
      inp = torch.ones(1, *SHAPE)
      outp = dump_module_stacktrace(model.encoder, inp)
      print(inp.shape, "->", outp.shape)
      print("RATIO:", math.prod(inp.shape) / math.prod(outp.shape))
      print(f"params: {num_module_parameters(model):,}")
  
      recon = dump_module_stacktrace(model.decoder, outp)
  
  model
