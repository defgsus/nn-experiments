experiment_name: ae/percept7_${matrix_slug}

matrix:
  cheap:
    - False
    #- True

trainer: experiments.ae.trainer.TrainAutoencoderSpecial
#perceptual_model: |
#  lambda x: torch.fft.fft2(VF.resize(x, [x.shape[-2] * 3, x.shape[-1] * 3], interpolation=VF.InterpolationMode.NEAREST, antialias=False))
perceptual_model: |
  nn.Sequential(
    nn.Conv2d(SHAPE[0], 64, 3),
    nn.GELU(),
    nn.Conv2d(64, 64, 3),
    nn.GELU(),
    nn.Conv2d(64, 64, 3),
    nn.GELU(),
  )

train_set: |
  rpg_tile_dataset_3x32x32(SHAPE, validation=False)

validation_set: |
  rpg_tile_dataset_3x32x32(SHAPE, validation=True)

batch_size: 64
learnrate: 0.0003
optimizer: AdamW
scheduler: CosineAnnealingLR
loss_function: l1
max_inputs: 1_000_000

globals:
  SHAPE: (3, 32, 32)
  CODE_SIZE: 128

model: |
  encoder = EncoderConv2d(
      SHAPE, 
      code_size=CODE_SIZE, 
      channels=(32, 64, 96, 128), 
      kernel_size=3,
      cheap=${cheap},
      act_fn=nn.ReLU6(),
  )

  encoded_shape = encoder.convolution.get_output_shape(SHAPE)
  decoder = nn.Sequential(
      nn.Linear(CODE_SIZE, math.prod(encoded_shape)),
      Reshape(encoded_shape),
      encoder.convolution.create_transposed(act_last_layer=False),
  )

  EncoderDecoder(encoder, decoder)
