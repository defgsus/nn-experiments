matrix:
  # compression ratio
  cr: [10]
  opt: ["Adam"]
  lr: [0.001]

  # blocks
  bl: [2]
  # layers per block
  lpb: [2]
  act: ["'gelu'"]

experiment_name: tests/rpg_deepenc2_${matrix_slug}

trainer: experiments.ae.trainer.TrainAutoencoderSpecial

globals:
  SHAPE: (3, 32, 32)
  CODE_SIZE: 32 * 32 // ${cr}

train_set: |
  from experiments.datasets import rpg_tile_dataset 
  rpg_tile_dataset(SHAPE, validation=False, interleave=True, shuffle=True, random_shift=4, random_flip=True)
  #import experiments.datasets.classic
  #experiments.datasets.classic.fmnist_dataset(train=True, shape=SHAPE)

freeze_validation_set: True
validation_set: |
  from experiments.datasets import rpg_tile_dataset 
  rpg_tile_dataset(SHAPE, validation=True, interleave=True)
  #import experiments.datasets.classic
  #experiments.datasets.classic.fmnist_dataset(train=False, shape=SHAPE)

batch_size: 64
learnrate: ${lr}
optimizer: ${opt}
scheduler: CosineAnnealingLR
loss_function: l1
max_inputs: 10_000_000

model: |
  #from src.models.encoder import resnet
  #encoder = resnet.resnet18_open(weights=torchvision.models.ResNet18_Weights.IMAGENET1K_V1)
  #with torch.no_grad():
  #    out_shape = encoder(torch.empty(2, *SHAPE)).shape[-3:]
  #encoder = nn.Sequential(
  #    encoder,
  #    nn.Flatten(1),
  #    nn.Linear(math.prod(out_shape), CODE_SIZE)
  #)
  #for p in encoder.parameters():
  #  p.requires_grad = False
  
  class SinLayer(nn.Module):
      def __init__(self, freq: float = 30.):
          super().__init__()
          self.freq = freq
  
      def forward(self, x):
          return torch.sin(x * self.freq)
  
  EncoderDecoder(
      EncoderConv2d(SHAPE, CODE_SIZE, channels=(24, 32, 48)),
      ImageManifoldDecoder(
          num_input_channels=CODE_SIZE,
          num_output_channels=SHAPE[0],
          default_shape=SHAPE[-2:],
          num_hidden=256,
          concat_residual=False,
          num_blocks=${bl},
          num_layers_per_block=${lpb},
          activation=${act},
          # pos_embedding_freqs=[3, 7],
      ),
  )
