experiment_name: super-res/conresconv_pix60k_${matrix_slug}

matrix:
  srf:
    - 4
  i:
    #- "n"
    - "l"
  ics: # internal_condition_size
    - 32
  l:
    - 9
  ks1:
    - 3
  ks2:
    - 3
  ch:
    - 32
  stride:
    - 1
  act:
    - gelu

trainer: experiments.denoise.trainer.TrainDenoising

train_set: |
  SuperResolutionDataset(
      PixelartDataset(shape=SHAPE, with_clip_embedding=True).shuffle(seed=23), #.limit(1000, keep_length=True),
      factor=${srf},
      interpolation={"n": VF.InterpolationMode.NEAREST, "l": VF.InterpolationMode.BILINEAR}["${i}"],
  )

validation_set: |
  SuperResolutionDataset(
      PixelartDataset(shape=SHAPE, with_clip_embedding=True).shuffle(42).limit(3000),
      factor=${srf},
      interpolation={"n": VF.InterpolationMode.NEAREST, "l": VF.InterpolationMode.BILINEAR}["${i}"],
  )

globals:
  SHAPE: (3, 32, 32)
  CLASSES: 512

batch_size: 64
learnrate: 0.0003
optimizer: AdamW
scheduler: CosineAnnealingLR
loss_function: l1
max_inputs: 600_000
#num_epochs_between_validations: 20
#num_epochs_between_checkpoints: 20
#num_inputs_between_validations: 100_000
#freeze_validation_set: True
second_arg_is_noise: True
#pass_args_to_model: [2]

model: |
    from experiments.denoise.resconv_cond import ConditionalResConv
  
    kernel_size = []
    padding = []
    for i in range(${l}):
        t = i / (${l} - 1)
        ks = ${ks1} * (1. - t) + t * ${ks2}
        ks = int(ks / 2) * 2 + 1
        kernel_size.append(ks)
        padding.append(int(math.floor(ks / 2)))
    
    ConditionalResConv(
        in_channels=SHAPE[0],
        condition_size=512,
        internal_condition_size=${ics},
        num_layers=${l},
        channels=${ch},
        stride=${stride},
        kernel_size=kernel_size,
        padding=padding,
        activation="${act}",
        activation_last_layer="sigmoid",
    )
