experiment_name: super-res/test_rcnn_pix20k-crop24-aa_${matrix_slug}

matrix:
  opt:
    #- Adam
    - AdamW
    #- RAdam
  srf:
    - 4
  aa:
    #- False
    - True
  l:
    - 9
  ks1:
    - 3
  ks2:
    - 3
  ch:
    - 32
    - 64
  stride:
    - 1
  act:
    - gelu

trainer: experiments.denoise.trainer.TrainDenoising

train_set: |
  SuperResolutionIterableDataset(
      PixelartDataset(shape=(SHAPE[0], 32, 32)).offset(3000).shuffle(23).limit(20_000)
          .transform([VT.RandomCrop(SHAPE[-1])])
      ,
      factor=${srf},
      interpolation=VF.InterpolationMode.BILINEAR if ${aa} else VF.InterpolationMode.NEAREST,
  )

validation_set: |
  SuperResolutionDataset(
      PixelartDataset(shape=SHAPE).limit(3000).shuffle(42),
      factor=${srf},
      interpolation=VF.InterpolationMode.BILINEAR if ${aa} else VF.InterpolationMode.NEAREST,
  )

globals:
  SHAPE: (3, 24, 24)

batch_size: 64
learnrate: 0.0003
optimizer: ${opt}
scheduler: CosineAnnealingLR
loss_function: l1
max_inputs: 100_000
num_epochs_between_validations: 1
#num_epochs_between_checkpoints: 20
#num_inputs_between_validations: 25_000
#freeze_validation_set: True
second_arg_is_noise: True
#pass_args_to_model: [2]

model: |
    from experiments.denoise.resconv_cond import ConditionalResConv
    
    kernel_size = []
    padding = []
    for i in range(${l}):
        t = i / (${l} - 1)
        ks = ${ks1} * (1. - t) + t * ${ks2}
        ks = int(ks / 2) * 2 + 1
        kernel_size.append(ks)
        padding.append(int(math.floor(ks / 2)))
    
    ConditionalResConv(
        in_channels=SHAPE[0],
        num_layers=${l},
        channels=${ch},
        stride=${stride},
        kernel_size=kernel_size,
        padding=padding,
        activation="${act}",
        activation_last_layer="sigmoid",
    )
