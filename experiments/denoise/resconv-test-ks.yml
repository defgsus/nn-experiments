experiment_name: denoise/resconv-ks2-hcrop-bw_${matrix_slug}

matrix:
  ds:
    - fmnist
  l:
    - 11
  ks1:
    - 3
    #- 5
    #- 7
    #- 9
    #- 11
  ks2:
    #- 3
    #- 5
    #- 7
    - 9
    #- 11
  ch:
    - 32
  stride:
    - 1
  #pad:
  #  - 1
  #act: ["Hardshrink", "Hardsigmoid", "Hardtanh", "Hardswish", "LeakyReLU", "LogSigmoid", "PReLU", "ReLU", "ReLU6", "RReLU", "SELU", "CELU", "GELU", "Sigmoid", "SiLU", "Mish", "Softplus", "Softshrink", "Softsign", "Tanh", "Tanhshrink"]
  act:
    - gelu


trainer: experiments.denoise.trainer.TrainDenoising

train_set: |
  {
      "mnist": mnist_dataset(train=True, shape=SHAPE, interpolation=False),
      "fmnist": fmnist_dataset(train=True, shape=SHAPE, interpolation=False),
      "rpg": rpg_tile_dataset_3x32x32(validation=False, shape=SHAPE, interpolation=False) 
  }["${ds}"]

validation_set: |
  {
      "mnist": mnist_dataset(train=False, shape=SHAPE, interpolation=False),
      "fmnist": fmnist_dataset(train=False, shape=SHAPE, interpolation=False),
      "rpg": rpg_tile_dataset_3x32x32(validation=True, shape=SHAPE, interpolation=False)
  }["${ds}"]

batch_size: 64
learnrate: 0.0003
optimizer: AdamW
scheduler: CosineAnnealingLR
loss_function: l1
max_inputs: 180_000
freeze_validation_set: True
train_input_transforms: |
  [
    # ImageNoise(amt_min=0.01, amt_max=0.15),  # mid
    # ImageNoise(amt_min=.15, amt_max=.3),  # strong

    # RandomQuantization(min_quantization=.05, max_quantization=0.3),  # mid
    # RandomQuantization(min_quantization=.2, max_quantization=0.4),  # strong
  
    RandomCropHalfImage(),
  ]
  

globals:
  SHAPE: (1, 28, 28)

model: |
  from experiments.denoise.resconv import ResConv
  
  kernel_size = []
  padding = []
  for i in range(${l}):
      t = i / (${l} - 1)
      ks = ${ks1} * (1. - t) + t * ${ks2}
      ks = int(ks / 2) * 2 + 1
      kernel_size.append(ks)
      padding.append(int(math.floor(ks / 2))  )
  
  ResConv(
      in_channels=SHAPE[0],
      num_layers=${l},
      channels=${ch},
      stride=${stride},
      kernel_size=kernel_size,
      padding=padding,
      activation="${act}",
      activation_last_layer="sigmoid",
  )
