experiment_name: textmask/convtext-selcopy_${matrix_slug}

matrix:
  bs: [64]
  opt: ["AdamW"]
  lr: [.0005]
  nitem:
    - 10
  area:
    - 40
  l:
    #- 4
    - 6
    #- 8
    #- 10
    #- 12
  ch:
    - 64
  ks:
    - 9
    - 11
    - 13
    - 15 # super-slow
    - 17  # super-slow in comparison
    #- [13, 11, 9, 7, 5, 3]  # BAD
    #- [3, 5, 7, 9, 11, 13]  # also BAD
  norm:
    - None
  act:
    - "gelu"


trainer: experiments.textmask.texttrainer.TextMaskTrainer
mask_is_arg: 1

train_set: |
  validation_set = TextSelectiveCopyingIterableDataset(
    count=10000,
    num_items=${nitem},
    area=${area},
    seed=23,
    with_masked=True,
  )
  TextSelectiveCopyingIterableDataset(
    count=100000,
    num_items=${nitem},
    area=${area},
    with_masked=True,
    exclude=list(i[0] for i in validation_set),
  )

validation_set: |
  validation_set

batch_size: ${bs}
learnrate: ${lr}
optimizer: ${opt}
scheduler: CosineAnnealingWarmupLR
loss_function: l1
max_inputs: 1_000_000
num_epochs_between_validations: 1
#num_inputs_between_validations: 50_000
freeze_validation_set: True


model: |
  from experiments.textmask.textmodel import ConvTextModel
  
  ConvTextModel(
      vocab_size=256,
      num_layers=${l},
      num_channels=${ch},
      kernel_size=${ks},
      norm=${norm},
      activation="${act}",
      residual=True,
      # residual_map={2: [4], 3: [5]},  # good one for 6 layers, but needs gradient-clipping at 0.01
  )
