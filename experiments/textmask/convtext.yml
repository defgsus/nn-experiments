experiment_name: textmask/convtext-alice_${matrix_slug}

matrix:
  bs: [64]
  opt: ["AdamW"]
  lr: [.0005]
  size:
    - 40
  mask:
    - 10
  mt:
    #- "'block'"
    #- "'single'"
    - ["single", "block"]
  l:
    - 8
  rec:
    - 1
  ch:
    - 64
  ks:
    - 9
  norm:
    - None
  act:
    - "gelu"


trainer: experiments.textmask.texttrainer.TextMaskTrainer
mask_size: ${mask}
mask_type: ${mt}

train_set: |
  ds = TextSegmentIterableDataset(
    #Path("/home/bergi/text/der_bandwurm.txt").read_text(),
    Path("${PATH}/datasets/alice.txt").read_text(),
    size=${size}, stride=1,
  ).repeat(20).shuffle(1000)

validation_set: |
  ds = TextSegmentIterableDataset(
    Path("/home/bergi/text/der_bandwurm.txt").read_text(),
    Path("${PATH}/datasets/alice.txt").read_text(),
    size=${size}, stride=5,
  ).shuffle(1000, seed=23).limit(5000)

batch_size: ${bs}
learnrate: ${lr}
optimizer: ${opt}
scheduler: CosineAnnealingWarmupLR
loss_function: l1
max_inputs: 4_000_000
#num_epochs_between_validations: 1
num_inputs_between_validations: 50_000
freeze_validation_set: True


model: |
  from experiments.textmask.textmodel import ConvTextModel
  
  ConvTextModel(
      vocab_size=256,
      num_layers=${l},
      num_channels=${ch},
      kernel_size=${ks},
      norm=${norm},
      activation="${act}",
      residual=True,
      recurrency=${rec},
  )
